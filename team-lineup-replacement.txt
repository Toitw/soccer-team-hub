          {/* Lineup Section */}
          <Card className="mb-8">
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle className="flex items-center">
                <Shield className="mr-2 h-5 w-5 text-primary" />
                Team Lineup
              </CardTitle>
              <div className="flex items-center space-x-2">
                <Select 
                  value={selectedFormation} 
                  onValueChange={handleFormationChange}
                >
                  <SelectTrigger className="w-[150px]">
                    <SelectValue placeholder="Formation" />
                  </SelectTrigger>
                  <SelectContent>
                    {availableFormations.map(formation => (
                      <SelectItem key={formation} value={formation}>
                        {formation}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {isAdmin && (
                  <Button variant="outline" size="sm">
                    Save Lineup
                  </Button>
                )}
              </div>
            </CardHeader>
            <CardContent className="overflow-x-auto">
              <div className="relative bg-gradient-to-b from-green-700 to-green-900 w-full aspect-[16/9] min-h-[400px] rounded-md flex items-center justify-center overflow-hidden">
                {/* Field container - just the bottom half of the field */}
                <div className="absolute top-0 left-0 w-full h-full">
                  {/* Field markings - half field only */}
                  <div className="border-2 border-white border-b-0 mx-4 mt-4 h-full rounded-t-md relative">
                    {/* Center circle - half circle at the top */}
                    <div className="absolute top-0 left-1/2 transform -translate-x-1/2 w-40 h-20 border-2 border-t-0 border-white rounded-b-full"></div>
                    
                    {/* Penalty area */}
                    <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 h-32 w-64 border-2 border-b-0 border-white"></div>
                    
                    {/* Goal area */}
                    <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 h-16 w-32 border-2 border-b-0 border-white"></div>
                    
                    {/* Goal */}
                    <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 h-2 w-24 bg-white"></div>
                    
                    {/* Penalty spot */}
                    <div className="absolute bottom-24 left-1/2 transform -translate-x-1/2 w-2 h-2 bg-white rounded-full"></div>
                    
                    {/* Interactive player positions */}
                    <div className="absolute top-0 left-0 w-full h-full">
                      {getPositionsByFormation(selectedFormation).map((position) => {
                        const player = lineup[position.id];
                        return (
                          <div
                            key={position.id}
                            className="absolute transform -translate-x-1/2 -translate-y-1/2 cursor-pointer group"
                            style={{ top: `${position.top}%`, left: `${position.left}%` }}
                            onClick={() => handlePositionClick(position.id)}
                          >
                            <div 
                              className={`
                                w-12 h-12 rounded-full flex items-center justify-center text-white
                                border-2 border-white shadow-lg transition-all
                                ${player ? 'scale-100' : 'scale-90 opacity-70'}
                                ${position.label === 'GK' ? "bg-blue-500" : 
                                  position.label === 'DEF' ? "bg-red-500" :
                                  position.label === 'MID' ? "bg-green-500" : "bg-yellow-500"}
                                ${isAdmin ? 'hover:scale-110 hover:opacity-100' : ''}
                              `}
                            >
                              {player ? (
                                <div className="flex flex-col items-center">
                                  <span className="font-bold text-sm">{player.user.jerseyNumber || "?"}</span>
                                </div>
                              ) : (
                                <div className="text-sm font-bold">{position.label}</div>
                              )}
                            </div>
                            
                            {player && (
                              <div className="absolute top-full mt-1 left-1/2 transform -translate-x-1/2 w-max">
                                <div className="text-white text-xs text-center font-semibold bg-black bg-opacity-70 rounded px-2 py-1 whitespace-nowrap">
                                  {player.user.fullName?.split(" ")[0] || ""}
                                </div>
                              </div>
                            )}
                            
                            {player && isAdmin && (
                              <div 
                                className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  removePlayerFromLineup(position.id);
                                }}
                              >
                                <span className="text-white text-xs font-bold">âœ•</span>
                              </div>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>

                {(!teamMembers || teamMembers.length === 0) && (
                  <div className="relative z-10 text-white text-center p-4 bg-black bg-opacity-50 rounded">
                    No team members available for lineup
                  </div>
                )}
              </div>

              <div className="mt-4 text-sm text-muted-foreground">
                <p className="flex items-center mb-2">
                  <span className="inline-block w-3 h-3 bg-blue-500 rounded-full mr-2"></span>
                  Goalkeeper
                  <span className="inline-block w-3 h-3 bg-red-500 rounded-full ml-4 mr-2"></span>
                  Defender
                  <span className="inline-block w-3 h-3 bg-green-500 rounded-full ml-4 mr-2"></span>
                  Midfielder
                  <span className="inline-block w-3 h-3 bg-yellow-500 rounded-full ml-4 mr-2"></span>
                  Forward
                </p>
                <p className="text-xs text-gray-500">
                  {isAdmin ? "Click on a position to assign a player to it." : "Team lineup is set by the coach."}
                </p>
              </div>
              
              {/* Dialog for adding a player to the lineup */}
              <Dialog open={showAddToLineupDialog} onOpenChange={setShowAddToLineupDialog}>
                <DialogContent className="sm:max-w-md">
                  <DialogHeader>
                    <DialogTitle>Add Player to Lineup</DialogTitle>
                    <DialogDescription>
                      Select a player to add to the selected position.
                    </DialogDescription>
                  </DialogHeader>
                  
                  <div className="max-h-80 overflow-y-auto py-4">
                    <div className="space-y-2">
                      <div className="mb-4">
                        <Input
                          placeholder="Search players..."
                          onChange={(e) => setSearchQuery(e.target.value)}
                          value={searchQuery}
                          className="mb-2"
                        />
                      </div>
                      
                      {teamMembers
                        ?.filter(m => 
                          m.role === "player" && 
                          (m.user.fullName?.toLowerCase().includes(searchQuery.toLowerCase()) || 
                           m.user.position?.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           !searchQuery
                          )
                        )
                        .map(member => (
                          <div 
                            key={member.id}
                            className="flex items-center p-2 rounded-md hover:bg-gray-100 cursor-pointer"
                            onClick={() => addPlayerToLineup(member)}
                          >
                            <Avatar className="h-10 w-10 mr-3">
                              <AvatarImage src={member.user.profilePicture || undefined} alt={member.user.fullName || ""} />
                              <AvatarFallback>{member.user.fullName?.charAt(0) || "U"}</AvatarFallback>
                            </Avatar>
                            <div>
                              <div className="font-medium">{member.user.fullName}</div>
                              <div className="text-sm text-gray-500 flex items-center">
                                {member.user.position && (
                                  <span className="mr-2">{member.user.position}</span>
                                )}
                                {member.user.jerseyNumber && (
                                  <Badge variant="outline" className="text-xs">#{member.user.jerseyNumber}</Badge>
                                )}
                              </div>
                            </div>
                          </div>
                        ))}
                      
                      {teamMembers?.filter(m => m.role === "player").length === 0 && (
                        <div className="text-center p-4 text-gray-500">
                          No players available. Add players to your team first.
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <DialogFooter>
                    <Button variant="outline" onClick={() => setShowAddToLineupDialog(false)}>
                      Cancel
                    </Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
            </CardContent>
          </Card>